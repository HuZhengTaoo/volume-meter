{"version":3,"sources":["logo.svg","VolumeMeter/AudioWorkletNodeVolumeMeter/useVolume.js","VolumeMeter/VolumeMeter/index.js","VolumeMeter/AudioWorkletNodeVolumeMeter/index.js","VolumeMeter/ScriptProcessorNodeVolumeMeter/useVolume.js","VolumeMeter/ScriptProcessorNodeVolumeMeter/index.js","VolumeMeter/index.js","App.js","reportWebVitals.js","index.js"],"names":["useVolume","stream","React","useState","volume","setVolume","ref","useRef","onmessage","useCallback","event","current","audioContext","data","Math","round","disconnectAudioContext","node","disconnect","errMsg","source","connectAudioContext","mediaStream","a","AudioContext","audioWorklet","addModule","createMediaStreamSource","AudioWorkletNode","port","connect","destination","useEffect","VolumeMeter","max","style","dividerList","useMemo","list","width","i","push","className","left","transform","ceil","defaultProps","memo","p","n","AudioWorkletNodeVolumeMeter","onaudioprocess","scriptProcessor","input","inputBuffer","getChannelData","sum","length","sqrt","gainNode","mediaStreamSource","createScriptProcessor","ScriptProcessorNodeVolumeMeter","type","App","setType","setStream","navigator","mediaDevices","getUserMedia","video","audio","then","s","src","logo","alt","onClick","backgroundColor","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f3636435.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\n\nfunction useVolume(stream) {\n  const [volume, setVolume] = React.useState(0);\n\n  const ref = React.useRef({});\n\n  const onmessage = React.useCallback((event) => {\n    if (!ref.current.audioContext) {\n      return;\n    }\n    // let _volume = 0;\n    // let _sensibility = 5;\n    // const current = performance.now();\n    // if (ref.current.now && 120 > current - ref.current.now) {\n    //   console.log(current);\n    //   return;\n    // }\n    // ref.current.now = current;\n    if (event.data.volume) {\n      // _volume = event.data.volume;\n      setVolume(Math.round(event.data.volume * 200));\n    }\n    // console.log((_volume * 100) / _sensibility);\n    // setVolume(event.data.volume * 100);\n  }, []);\n\n  const disconnectAudioContext = React.useCallback(() => {\n    if (ref.current.node) {\n      try {\n        ref.current.node.disconnect();\n      } catch (errMsg) {}\n    }\n    if (ref.current.source) {\n      try {\n        ref.current.source.disconnect();\n      } catch (errMsg) {}\n    }\n    ref.current.node = null;\n    ref.current.source = null;\n    ref.current.audioContext = null;\n    setVolume(0);\n  }, []);\n\n  const connectAudioContext = React.useCallback(\n    async (mediaStream) => {\n      if (ref.current.audioContext) {\n        disconnectAudioContext();\n      }\n      try {\n        ref.current.audioContext = new AudioContext();\n        await ref.current.audioContext.audioWorklet.addModule('./worklet/vumeter.js');\n        if (!ref.current.audioContext) {\n          return;\n        }\n        ref.current.source = ref.current.audioContext.createMediaStreamSource(mediaStream);\n        ref.current.node = new AudioWorkletNode(ref.current.audioContext, 'vumeter');\n        ref.current.node.port.onmessage = onmessage;\n        ref.current.source.connect(ref.current.node).connect(ref.current.audioContext.destination);\n      } catch (errMsg) {\n        disconnectAudioContext();\n      }\n    },\n    [disconnectAudioContext, onmessage],\n  );\n\n  React.useEffect(() => {\n    setVolume(0);\n    if (!stream) {\n      return () => {};\n    }\n    connectAudioContext(stream);\n    return () => {\n      disconnectAudioContext(stream);\n    };\n  }, [stream, connectAudioContext, disconnectAudioContext]);\n\n  return volume;\n}\n\nexport default useVolume;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './index.css';\n\nconst VolumeMeter = ({ volume, max = 10, style = {} }) => {\n\n  const dividerList = React.useMemo(() => {\n    const list = [];\n    const width = 100 / (max * 2);\n    for (let i = 0; i < max; i += 1) {\n      list.push(\n        <div\n          key={i}\n          className=\"volumeMeterDivider\"\n          style={{ left: `${(2 * i + 1) * width}%`, width: `${width}%` }}\n        />,\n      );\n    }\n    return list;\n  }, [max]);\n\n  return (\n    <div className=\"volumeMeter\" style={style}>\n      <div className=\"volumeMeterBg\" />\n      <div\n        className=\"volumeMeterInner\"\n        style={{\n          transform: `scaleX(${Math.ceil((volume * max) / 100) / max})`,\n        }}\n      />\n      {dividerList}\n    </div>\n  );\n};\n\nVolumeMeter.propTypes = {\n  volume: PropTypes.number,\n  max: PropTypes.number,\n  style: PropTypes.object,\n};\n\nVolumeMeter.defaultProps = {\n  volume: null,\n  max: 0,\n  style: null,\n};\n\nexport default React.memo(VolumeMeter, (p, n) => p.volume === n.volume && p.max === n.max && p.style === n.style);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport useVolume from './useVolume';\nimport VolumeMeter from '../VolumeMeter';\n\nconst AudioWorkletNodeVolumeMeter = ({ stream, max, style }) => {\n  const volume = useVolume(stream);\n  return <VolumeMeter volume={volume} max={max} style={style} />;\n};\n\nAudioWorkletNodeVolumeMeter.propTypes = {\n  stream: PropTypes.object,\n  max: PropTypes.number,\n  style: PropTypes.object,\n};\n\nAudioWorkletNodeVolumeMeter.defaultProps = {\n  stream: null,\n  max: 0,\n  style: null,\n};\n\nexport default React.memo(AudioWorkletNodeVolumeMeter, (p, n) => p.stream === n.stream && p.max === n.max && p.style === n.style);;\n","import React from 'react';\n\nfunction useVolume(stream) {\n  const [volume, setVolume] = React.useState(0);\n\n  const ref = React.useRef({});\n\n  const onaudioprocess = React.useCallback((event) => {\n    if (!ref.current.scriptProcessor) {\n      return;\n    }\n    const input = event.inputBuffer.getChannelData(0);\n    let sum = 0.0;\n    for (let i = 0; i < input.length; i += 1) {\n      sum += input[i] * input[i];\n    }\n    setVolume(Math.round(Math.sqrt(sum / input.length) * 100));\n  }, []);\n\n  const disconnectAudioContext = React.useCallback((mediaStream) => {\n    if (ref.current.gainNode) {\n      try {\n        ref.current.gainNode.disconnect();\n      } catch (errMsg) {}\n    }\n    if (ref.current.scriptProcessor) {\n      try {\n        ref.current.scriptProcessor.disconnect();\n      } catch (errMsg) {}\n    }\n    if (ref.current.mediaStreamSource) {\n      try {\n        ref.current.mediaStreamSource.disconnect();\n      } catch (errMsg) {}\n    }\n    ref.current.gainNode = null;\n    ref.current.scriptProcessor = null;\n    ref.current.mediaStreamSource = null;\n    ref.current.audioContext = null;\n    setVolume(0);\n  }, []);\n\n  const connectAudioContext = React.useCallback(\n    (mediaStream) => {\n      try {\n        ref.current.audioContext = new AudioContext();\n        ref.current.mediaStreamSource = ref.current.audioContext.createMediaStreamSource(mediaStream);\n        ref.current.scriptProcessor = ref.current.audioContext.createScriptProcessor(2048, 1, 1);\n\n        ref.current.scriptProcessor.onaudioprocess = onaudioprocess;\n        ref.current.scriptProcessor.connect(ref.current.audioContext.destination);\n        ref.current.mediaStreamSource.connect(ref.current.scriptProcessor);\n      } catch (errMsg) {\n        disconnectAudioContext();\n      }\n    },\n    [disconnectAudioContext, onaudioprocess],\n  );\n\n  React.useEffect(() => {\n    setVolume(0);\n    if (!stream) {\n      return () => {};\n    }\n    connectAudioContext(stream);\n    return () => {\n      disconnectAudioContext(stream);\n    };\n  }, [stream, connectAudioContext, disconnectAudioContext]);\n\n  return volume;\n}\n\nexport default useVolume;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport useVolume from './useVolume';\nimport VolumeMeter from '../VolumeMeter';\n\nconst ScriptProcessorNodeVolumeMeter = ({ stream, max, style }) => {\n  const volume = useVolume(stream);\n  return <VolumeMeter volume={volume} max={max} style={style} />;\n};\n\nScriptProcessorNodeVolumeMeter.propTypes = {\n  stream: PropTypes.object,\n  max: PropTypes.number,\n  style: PropTypes.object,\n};\n\nScriptProcessorNodeVolumeMeter.defaultProps = {\n  stream: null,\n  max: 0,\n  style: null,\n};\n\nexport default React.memo(ScriptProcessorNodeVolumeMeter, (p, n) => p.stream === n.stream && p.max === n.max && p.style === n.style);;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport AudioWorkletNodeVolumeMeter from './AudioWorkletNodeVolumeMeter';\nimport ScriptProcessorNodeVolumeMeter from './ScriptProcessorNodeVolumeMeter';\nimport './index.css';\n\nconst VolumeMeter = ({ stream, max = 10, style = {}, type='AudioWorkletNode' }) => {\n  return 'AudioWorkletNode' === type ? <AudioWorkletNodeVolumeMeter stream={stream} max={max} style={style} />  :  <ScriptProcessorNodeVolumeMeter stream={stream} max={max} style={style} />;\n};\n\nVolumeMeter.propTypes = {\n  type: PropTypes.oneOf(['AudioWorkletNode', 'ScriptProcessorNode']),\n  stream: PropTypes.object,\n  max: PropTypes.number,\n  style: PropTypes.object,\n};\n\nVolumeMeter.defaultProps = {\n  type: 'AudioWorkletNode',\n  stream: null,\n  max: 0,\n  style: null,\n};\n\nexport default React.memo(VolumeMeter, (p, n) => p.type === n.type && p.stream === n.stream && p.max === n.max && p.style === n.style);\n","import React from \"react\";\nimport logo from './logo.svg';\nimport './App.css';\nimport VolumeMeter from './VolumeMeter';\n\n\nfunction App() {\n  const [type, setType] = React.useState('');\n  const [stream, setStream] = React.useState(null);\n  React.useEffect(() => {\n    navigator.mediaDevices\n      .getUserMedia({ video: false, audio: true })\n      .then((s) => {\n        setStream(s);\n      });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        {/* <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a> */}\n        <div className=\"buttons\">\n          <button className=\"button\" onClick={() => setType('AudioWorkletNode')}>AudioWorkletNodeVolumeMeter</button>\n          <br />\n          <button className=\"button\" onClick={() => setType('ScriptProcessorNode')}>ScriptProcessorNodeVolumeMeter</button>\n        </div>\n        <div className=\"type\">\n          current type: {type}\n        </div>\n        {type && <VolumeMeter type={type} stream={stream} max={20} style={{width: '160px', backgroundColor: '#282c34'}} />}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}